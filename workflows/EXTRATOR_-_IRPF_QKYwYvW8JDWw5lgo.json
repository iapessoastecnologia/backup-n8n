{
  "createdAt": "2025-05-28T13:40:16.820Z",
  "id": "QKYwYvW8JDWw5lgo",
  "name": "EXTRATOR - IRPF",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "id": "724f0582-2568-4cf4-8bcf-f10fcd02dcb7",
      "name": "OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -520,
        260
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Extract from File').item.json.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Persona\nVocê é um robo extratator de dados de arquivos PDF da IRPF 2024, referente ao calendário de 2023.\n# Objetivo\nSeu objetivo é extrair os dados dos PDFs que forem lhe fornecidos. Você é um robo extratator de dados de arquivos PDF da IRPF 2024, referente ao calendário de 2023. Extrai os dados dos PDFs que forem lhe fornecidos.\n\n---\n\n## 1. Leia-o completamente com atenção.\nAo receber um arquivo PDF, leia completamente seu conteúdo.\n## 2. Gere um JSON estruturado contendo:\n\n###  Declarante\n\n- Nome\n- CPF\n\n### Dependêntes\n\n- CÓDIGO [STRING]\n- NOME [string]\n- CPF [string]\n\nlista com cada dependente individual\n*Cada dependente deve ser assim: Exemplo*: \n\n\n\n\n\n\n\n\n\n```{    \"codigo\": 21,    \"nome\": SOPHIA FERREIRA SILVA,   \"cpf\": 123.456.789-09}```\n\n## Rendimentos Tributaveis:\n\n> REGRA: Todos os valores, devem ser informados, sem pontos e virgulas.\n\nInput: 1.500,59\n\nJeito errado: 1.500,59\nCerto: 150059\n\n### Rendimentos Tributaveis PJ:\n\n**Localização estimada:**É na seção: **\"RENDIMENTOS TRIBUTÁVEIS RECEBIDOS DE PESSOA JURÍDICA PELO TITULAR\"**\n\n- Nome [string]\n- CNPJ [string]\n- Redimentos [string]\n- Previdencia [string]\n- ImpostoRetido [string]\n- DecimoTerceiro [string]\n- IRPFDecimoTerceiro [string]\n\n*lista com cada rendimento individual*\n\n**Exemplo de entrada:**\n- nome: CACAU SHOW\n- CNPJ: 0123.456.789/000-1\n- dados: \n    - rendimentos: \"10.000,00\"\n    -  previdencia: \"5,00\"\n    - impostoretido:  \"5,000\"\n    - decimoterceiro: \"30,00\"\n    - irpfdecimoterceiro: \"2,00\"\n    \n\n\n\n**Exemplo resposta:**\n\n```\n\"rendimentos_tributaveis_pj\": [\n{\n    \"nome\": CACAU SHOW\n    \"CNPJ\": 0123.456.789/000-1\n    \"dados\": [\n        \"rendimentos\": \"1000000\"\n        \"previdencia\": \"500\"\n        \"impostoretido\":  \"5000\"\n        \"decimoterceiro\": \"3000\"\n        \"irpfdecimoterceiro\": \"200\"\n    ]\n}\n{\n    \"nome\": J&T TRANSPORTADORA\n    \"CNPJ\": 156.236.021/000-1\n    \"dados\": [\n        \"rendimentos\": \"1050000\"\n        \"previdencia\": \"550\"\n        \"impostoretido\":  \"6000\"\n        \"decimoterceiro\": \"7500\"\n        \"irpfdecimoterceiro\": \"100\"\n    ]\n}\n]\n```\n\n> REGRA: CONFIRA SE REALMENTE NÃO EXISTE NENHUMA DADO SOBRE Rendimentos Tributaveis PJ, mais de uma vez, para conferir se não deixou passar nada!\n---\n\n\n## 3. Certifique-se de capturar descrições, valores e identificadores com exatidão.\n## 4. Organize os dados extraídos em um arquivo JSON estruturado, seguindo um formato conciso e padronizado.\n\n\n---\n## REGRAS\n\n> **REGRAS GLOBAIS**:\n\n- Os valores sempre devem seguir a regra de retirar os pontos e virgulas.\nEx: 10.458,95\nRetorno: 1045895\n\n- NUNCA RETORNE ```json``` na RESPOSTA\n- EM BENS E DIREITOS O NOME SEMPRE DEVE RETORNAR O NOME EXATAMENTE IGUAL O DISCRIMINAÇÃO, NÃO MUDE NEM INVENTE NADA!",
          "passthroughBinaryImages": true
        }
      },
      "id": "17b078b3-5e93-4c8f-a83b-90a035f51b57",
      "name": "Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -520,
        20
      ],
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 1500,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "pdf",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1000,
        20
      ],
      "id": "f02b2695-bd38-458b-93be-f76b5d062b41",
      "name": "Webhook",
      "webhookId": "ed2e147c-cb72-46e3-b551-6b866eb7447d"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('Agent').item.json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "c45e4940-94e2-459b-a3c3-4ed9215a40b2",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "file",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -760,
        20
      ],
      "id": "c523b095-f2e3-4d5f-b38e-10ea89d3d22e",
      "name": "Extract from File"
    }
  ],
  "connections": {
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
