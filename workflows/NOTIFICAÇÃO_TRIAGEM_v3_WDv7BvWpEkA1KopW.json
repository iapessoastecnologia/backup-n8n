{
  "createdAt": "2025-10-09T12:16:00.015Z",
  "id": "WDv7BvWpEkA1KopW",
  "name": "NOTIFICA√á√ÉO TRIAGEM v3",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1412776659505119316",
          "mode": "list",
          "cachedResultName": "Desenvolvimento - Dep IA",
          "cachedResultUrl": "[REDACTED]"
        },
        "channelId": {
          "__rl": true,
          "value": "1417832389589209170",
          "mode": "list",
          "cachedResultName": "teste-bot",
          "cachedResultUrl": "[REDACTED]"
        },
        "content": "={{ $json.content }}",
        "options": {
          "flags": [
            "SUPPRESS_NOTIFICATIONS",
            "SUPPRESS_EMBEDS"
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1664,
        144
      ],
      "id": "54174d34-3365-434f-a7cc-7f75ef1fc456",
      "name": "Envia a mensagem",
      "webhookId": "5e433ec8-3524-4028-afcf-e6e8d62d1875"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        816,
        32
      ],
      "id": "af72e510-7a34-4a40-b209-dd46f29b0e59",
      "name": "Merge"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json['Data Cria√ß√£o'] }}",
                    "rightValue": "={{ $now.toFormat('dd/MM/yyyy') }}",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "916916bf-fd18-4953-90ec-779380516cac"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "[REDACTED]"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "af2739d7-074a-4143-a92f-c7e39bde8c5e",
                    "leftValue": "={{$json['Data Modifica√ß√£o']}}",
                    "rightValue": "={{ $now.toFormat('dd/MM/yyyy') }}",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "[REDACTED]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        352,
        16
      ],
      "id": "4a6d593a-3dfb-487b-8358-44649a81a491",
      "name": "Switch add/mod",
      "notesInFlow": true,
      "notes": "Verifica se a adi√ß√£o ou modifica√ß√£o foi feita naquele dia"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "[REDACTED]",
          "mode": "list",
          "cachedResultName": "[TESTE - TRIAGEM]",
          "cachedResultUrl": "[REDACTED]"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $json.tab }}",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        160,
        16
      ],
      "id": "94eaf35c-38b5-4685-a1f1-1ff871499632",
      "name": "L√™ planilha",
      "notesInFlow": true,
      "notes": "L√™ todas as linhas da planilha"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7f88ba67-aa66-447f-b5da-c0c06afa038b",
              "name": "tab",
              "value": "={{ $now.toFormat('yyyy-MM') }}",
              "type": "string"
            },
            {
              "id": "cd6227c2-cf13-4a9d-8377-b08f4be45db3",
              "name": "len",
              "value": "={{ $now.toFormat('yyyy-MM').length }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        16,
        16
      ],
      "id": "ea73556c-1c26-448e-aa49-21946280e146",
      "name": "Cria campo",
      "notesInFlow": true,
      "notes": "Cria campos para compara√ß√£o da data com o nome da planilha"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            },
            {
              "triggerAtHour": 10,
              "triggerAtMinute": 30
            },
            {
              "triggerAtHour": 13
            },
            {
              "triggerAtHour": 15,
              "triggerAtMinute": 30
            },
            {
              "triggerAtHour": 17
            },
            {
              "triggerAtHour": 23,
              "triggerAtMinute": 59
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -224,
        16
      ],
      "id": "7b91c2e2-ab86-45d5-9646-769b9c19f65b",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "191b63df-4dcd-4d11-9921-e7509cc37b22",
              "name": "empresa",
              "value": "={{ $json.Caminho\n   .replaceAll('X CASTELO', '')\n   .replaceAll('Tudo', '')\n   .trimEnd()\n   .trimStart()\n}}\n",
              "type": "string"
            },
            {
              "id": "b2348cb2-e2e6-4fb9-9bef-94560e27dde4",
              "name": "link",
              "value": "=https://drive.google.com/drive/folders/{{ $json['ID da Pasta'] }}",
              "type": "string"
            },
            {
              "id": "66f08488-54f7-424e-983b-9e41da4b8af2",
              "name": "ultima_modificacao",
              "value": "={{$json['Data Modifica√ß√£o']}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        592,
        128
      ],
      "id": "6e15850f-0611-46e8-812b-cedc932f8974",
      "name": "Modificados",
      "notesInFlow": true,
      "notes": "Adiciona campos de modificados para a mensagem"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "191b63df-4dcd-4d11-9921-e7509cc37b22",
              "name": "empresa",
              "value": "={{ $json.Caminho\n   .replaceAll('X CASTELO', '')\n   .replaceAll('Tudo', '')\n   .trimEnd()\n   .trimStart()\n}}\n",
              "type": "string"
            },
            {
              "id": "b2348cb2-e2e6-4fb9-9bef-94560e27dde4",
              "name": "link",
              "value": "=https://drive.google.com/drive/folders/{{ $json['ID da Pasta'] }}",
              "type": "string"
            },
            {
              "id": "66f08488-54f7-424e-983b-9e41da4b8af2",
              "name": "ultima_adicao",
              "value": "={{ $json['Data Cria√ß√£o'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        592,
        -80
      ],
      "id": "4823d1c6-032c-4b2e-8852-e328f6578de1",
      "name": "Adicionados",
      "notesInFlow": true,
      "notes": "Adiciona campo de adi√ß√£o para a mensagem "
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// Estruturas para agrupamento\nlet adicionados = {};\nlet modificados = {};\n\n// Distribui os itens em adicionados ou modificados\nfor (const item of items) {\n  const empresa = item.json.empresa;\n  const link = item.json.link;\n  const ultimaAdicao = item.json.ultima_adicao;\n  const ultimaModificacao = item.json.ultima_modificacao;\n\n  if (ultimaAdicao && ultimaAdicao !== \"undefined\") {\n    if (!adicionados[empresa]) adicionados[empresa] = {};\n    adicionados[empresa][link] = ultimaAdicao;\n  }\n\n  if (ultimaModificacao && ultimaModificacao !== \"undefined\") {\n    if (!modificados[empresa]) modificados[empresa] = {};\n    modificados[empresa][link] = ultimaModificacao;\n  }\n}\n\n// Fun√ß√£o para montar mensagem de uma categoria\nfunction montarMensagem(titulo, empresas) {\n  let mensagens = [];\n  let bloco = `**${titulo}**, <@&1412776735401054219>!\\n\\n`;\n\n  for (const [empresa, pastas] of Object.entries(empresas)) {\n    let linha = `\\n**${empresa}**\\n`;\n\n    for (const [link, data] of Object.entries(pastas)) {\n      linha += `üìÇ Pasta: ${link}\\nüïí Data: ${data}\\n===================================================\\n`;\n    }\n\n    linha += \"\\n\";\n\n    if ((bloco + linha).length > 1900) {\n      mensagens.push(bloco);\n      bloco = linha;\n    } else {\n      bloco += linha;\n    }\n  }\n\n  if (bloco.trim()) {\n    mensagens.push(bloco);\n  }\n\n  return mensagens;\n}\n\n// Monta mensagens finais\nlet mensagens = [];\nif (Object.keys(adicionados).length) {\n  mensagens.push(...montarMensagem(\"üì• Novos arquivos adicionados\", adicionados));\n}\nif (Object.keys(modificados).length) {\n  mensagens.push(...montarMensagem(\"‚úèÔ∏è Arquivos modificados\", modificados));\n}\n\n// Retorna para o Discord\nreturn mensagens.map(m => ({ json: { content: m } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        144
      ],
      "id": "f7c7dad2-015d-4714-8062-47ae1b5c10be",
      "name": "Set Message"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// Detecta se string est√° em ISO\nfunction isISO(dateStr) {\n  return /^\\d{4}-\\d{2}-\\d{2}T/.test(dateStr);\n}\n\n// Converte dd/MM/yyyy HH:mm:ss (BR) ‚Üí Date UTC\nfunction parseBRDate(dateStr) {\n  if (!dateStr) return null;\n  const [datePart, timePart] = dateStr.split(\" \");\n  const [day, month, year] = datePart.split(\"/\").map(Number);\n  const [hours, minutes, seconds] = (timePart || \"00:00:00\").split(\":\").map(Number);\n\n  // cria a data no fuso de Bras√≠lia (UTC-3) e converte para UTC\n  const local = new Date(year, month - 1, day, hours, minutes, seconds);\n  const utc = new Date(local.getTime() + (3 * 60 * 60 * 1000)); // soma 3h\n  return utc;\n}\n\n// Converte qualquer data (ISO ou BR) para Date UTC\nfunction toDate(dateStr) {\n  if (!dateStr) return null;\n  if (isISO(dateStr)) return new Date(dateStr); // j√° UTC\n  return parseBRDate(dateStr);\n}\n\n// --- Separa DataTable e planilha ---\nconst supabaseRow = items.find(i => i.json.created_at); // vem do node Get many rows\nconst planilhaRows = items.filter(i => i.json.ultima_adicao || i.json.ultima_modificacao);\n\n// √öltima execu√ß√£o no Supabase\nconst lastExecDate = supabaseRow ? new Date(supabaseRow.json.created_at) : null;\n\n// Se n√£o h√° registro anterior, libera tudo\nif (!lastExecDate) {\n  return planilhaRows;\n}\n\n// --- Filtra apenas os registros mais recentes ---\nconst recentes = planilhaRows.filter(item => {\n  const ultimaAdicao = toDate(item.json.ultima_adicao);\n  const ultimaModificacao = toDate(item.json.ultima_modificacao);\n\n  return (\n    (ultimaAdicao && ultimaAdicao > lastExecDate) ||\n    (ultimaModificacao && ultimaModificacao > lastExecDate)\n  );\n});\n\n// Se nenhum item for mais recente ‚Üí trava o envio\nif (!recentes.length) {\n  console.log(\"‚õî Nenhum item novo ou modificado ap√≥s a √∫ltima execu√ß√£o. Mensagem bloqueada.\");\n  return []; // impede que o fluxo siga pro Discord\n}\n\nreturn recentes;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        48
      ],
      "id": "fb78fcee-4765-405c-a17e-0d361837d971",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        48
      ],
      "id": "7fc80780-f823-42bf-bb1e-63007785c2ea",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "execucoes",
        "limit": 1,
        "filterType": "=string",
        "filterString": "order=created_at.desc&limit=1"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        480,
        304
      ],
      "id": "f6d5ba04-c3cc-4f35-89d2-f16502c5a6f7",
      "name": "Get many rows"
    },
    {
      "parameters": {
        "tableId": "execucoes"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1472,
        -48
      ],
      "id": "076d33c5-3a86-4a3e-938b-2cd555986a51",
      "name": "Create a row"
    }
  ],
  "connections": {
    "Envia a mensagem": {
      "main": [
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch add/mod": {
      "main": [
        [
          {
            "node": "Adicionados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Modificados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "L√™ planilha": {
      "main": [
        [
          {
            "node": "Switch add/mod",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria campo": {
      "main": [
        [
          {
            "node": "L√™ planilha",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          },
          {
            "node": "Cria campo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Modificados": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Adicionados": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Message": {
      "main": [
        [
          {
            "node": "Envia a mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Set Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
}
