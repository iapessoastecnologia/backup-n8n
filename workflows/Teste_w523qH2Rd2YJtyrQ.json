{"createdAt":"2025-07-03T11:23:03.777Z","id":"w523qH2Rd2YJtyrQ","name":"Teste","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"processar-markdown","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-680,220],"id":"cd4d31f1-f9c5-4864-9344-1d1e54ea205f","name":"Webhook","webhookId":"054fe855-e931-4403-a7bf-3f5bbd16cc10"},{"parameters":{"promptType":"define","text":"=Aja como um especialista em automação de dados e processamento de texto para arquivos comerciais.\n\nSua tarefa é transformar um texto extraído de um PDF de orçamento de fornecedor em um JSON estruturado com indentação, com base nos dados fornecidos.\n\nVocê DEVE seguir rigorosamente as instruções abaixo:\n\nO texto de entrada contém um cabeçalho na primeira linha, seguido pelas linhas de itens.\n\nOs campos estão separados por caracteres de tabulação (TAB). Use esse caractere para interpretar os dados de entrada.\n\nMapeie os nomes das colunas com base nas variações abaixo, e padronize a saída usando exatamente as seguintes chaves neste formato:\n\"referencia\", \"descricao\", \"ncm\", \"qtde\", \"vlr_unit\", \"marca\"\n\nDicionário de correspondência para colunas:\n\nreferencia:\n'referência', 'referencia', 'ref.', 'ref', 'código', 'codigo', 'cod', 'Identificação'\n\ndescricao:\n'descrição', 'descricao', 'desc', 'desc produto', 'produto', 'item', 'detalhes', 'nome produto'\n\nncm:\n'ncm'\n\nqtde:\n'QtdPeso', 'Qtde', 'Qtd Peso'\n\nvlr_unit:\n'valor unitário', 'valor.unit', 'vlr.unit', 'vl unit', 'preço unitário', 'preco unitario', 'unit price', 'valor unit', 'vl_unit'\n\nmarca:\n'marca', 'fabricante', 'fornecedor'\n\n⚠️ Regras obrigatórias:\n\nCaso uma linha de item contenha quebras de linha no campo de descrição, considere essas quebras como parte do mesmo item. Junte todas as linhas até que os seis campos esperados estejam completos.\n\nSempre que identificar na descrição um sufixo com hífen e sigla (ex: \"- RF\", \"- GM\", \"- VW\"), separe esse trecho e mova-o para o campo \"marca\", desde que ele esteja ao final da descrição ou numa linha separada após quebra.\n\nValide cada item com base na contagem de colunas esperadas (6 campos). Se a linha não contiver os seis campos, continue lendo a próxima linha como parte do mesmo item.\n\nPreserve os dados exatamente como aparecem, incluindo formatos numéricos, pontuação, nomes ou descrições.\n\nA saída deve ser exclusivamente um JSON com indentação, contendo uma lista de objetos com as chaves especificadas, sem nenhuma explicação ou comentário adicional.\n\nExemplo de entrada com quebra de linha e sufixo de marca na descrição:\n\n039205/2 BUCHA DO EIXO DIANT. APL 335 - 51,6X47,8X32,5\n\nRF\n87089990 2 30,23 SABÓ\n\nResultado JSON esperado:\n\n[\n  {\n    \"referencia\": \"039205/2\",\n    \"descricao\": \"BUCHA DO EIXO DIANT. APL 335 - 51,6X47,8X32,5\",\n    \"ncm\": \"87089990\",\n    \"qtde\": \"2\",\n    \"vlr_unit\": \"30,23\",\n    \"marca\": \"RF SABÓ\"\n  }\n]\n--- Início do texto ---\n{{ $json.data }}\n--- Fim do texto ---","hasOutputParser":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[1620,400],"id":"07b8b863-ac1e-4145-8e32-b2b0b0286e93","name":"AI Agent","alwaysOutputData":false},{"parameters":{"model":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"gpt-4o-mini"},"options":{"temperature":0.7}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[1900,600],"id":"091619ce-b98a-4f6a-b4ef-2b291345d4f8","name":"OpenAI Chat Model"},{"parameters":{"respondWith":"json","responseBody":"={{ $json.output }}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.3,"position":[1080,140],"id":"98a2fd47-828f-4fcf-85df-ab9d3c7bbb37","name":"Respond to Webhook"},{"parameters":{"jsonSchemaExample":"[\n  {\n    \"referencia\": \"039205/2\",\n    \"descricao\": \"BUCHA DO EIXO DIANT. APL 335 - 51,6X47,8X32,5\",\n    \"ncm\": \"87089990\",\n    \"qtde\": \"2\",\n    \"vlr_unit\": \"30,23\",\n    \"marca\": \"RF SABÓ\"\n  }\n]"},"type":"[REDACTED]","typeVersion":1.2,"position":[1880,780],"id":"152762b2-d480-4346-bee7-7d9a01ff0c42","name":"Structured Output Parser"},{"parameters":{"promptType":"define","text":"=Aja como um especialista em automação de dados e processamento de texto para arquivos comerciais.\n\nSua tarefa é transformar um texto extraído de um PDF de orçamento de fornecedor em um JSON estruturado com indentação, com base nos dados fornecidos.\n\nVocê DEVE seguir rigorosamente as instruções abaixo:\n\nO texto de entrada contém um cabeçalho na primeira linha, seguido pelas linhas de itens.\n\nOs campos estão separados por caracteres de tabulação (TAB). Use esse caractere para interpretar os dados de entrada.\n\nMapeie os nomes das colunas com base nas variações abaixo, e padronize a saída usando exatamente as seguintes chaves neste formato:\n\"referencia\", \"descricao\", \"ncm\", \"qtde\", \"vlr_unit\", \"marca\"\n\nDicionário de correspondência para colunas:\n\nreferencia:\n'referência', 'referencia', 'ref.', 'ref', 'código', 'codigo', 'cod', 'Identificação'\n\ndescricao:\n'descrição', 'descricao', 'desc', 'desc produto', 'produto', 'item', 'detalhes', 'nome produto'\n\nncm:\n'ncm'\n\nqtde:\n'QtdPeso', 'Qtde', 'Qtd Peso'\n\nvlr_unit:\n'valor unitário', 'valor.unit', 'vlr.unit', 'vl unit', 'preço unitário', 'preco unitario', 'unit price', 'valor unit', 'vl_unit'\n\nmarca:\n'marca', 'fabricante', 'fornecedor'\n\n⚠️ Regras obrigatórias:\n\nCaso uma linha de item contenha quebras de linha no campo de descrição, considere essas quebras como parte do mesmo item. Junte todas as linhas até que os seis campos esperados estejam completos.\n\nSempre que identificar na descrição um sufixo com hífen e sigla (ex: \"- RF\", \"- GM\", \"- VW\"), separe esse trecho e mova-o para o campo \"marca\", desde que ele esteja ao final da descrição ou numa linha separada após quebra.\n\nValide cada item com base na contagem de colunas esperadas (6 campos). Se a linha não contiver os seis campos, continue lendo a próxima linha como parte do mesmo item.\n\nPreserve os dados exatamente como aparecem, incluindo formatos numéricos, pontuação, nomes ou descrições.\n\nA saída deve ser exclusivamente um JSON com indentação, contendo uma lista de objetos com as chaves especificadas, sem nenhuma explicação ou comentário adicional.\n\nExemplo de entrada com quebra de linha e sufixo de marca na descrição:\n\n039205/2 BUCHA DO EIXO DIANT. APL 335 - 51,6X47,8X32,5\n\nRF\n87089990 2 30,23 SABÓ\n\nResultado JSON esperado:\n\n[\n  {\n    \"referencia\": \"039205/2\",\n    \"descricao\": \"BUCHA DO EIXO DIANT. APL 335 - 51,6X47,8X32,5\",\n    \"ncm\": \"87089990\",\n    \"qtde\": \"2\",\n    \"vlr_unit\": \"30,23\",\n    \"marca\": \"RF SABÓ\"\n  }\n]\n--- Início do texto ---\n{{ $json.data }}\n--- Fim do texto ---","hasOutputParser":true,"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[1500,200],"id":"2c822dcc-f1bf-46d2-83b7-d0176ced5c78","name":"Basic LLM Chain"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"=Abaixo está uma lista em markdown contendo grupos de produtos com códigos padronizados. Cada grupo possui os preços oferecidos por diferentes fornecedores. Para cada grupo, diga:\n\n1. Qual fornecedor oferece o menor valor,\n2. Qual é esse valor,\n3. E apenas adicione isso abaixo de cada tabela — **não resuma ou remova nenhuma linha da tabela**.\n\nMarkdown:\n\n{{ $json['Código'] }}{{ $json['Descrição'] }}{{ $json.Valor }}{{ $json.Fornecedor }}\n"}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[480,220],"id":"5fc106c1-d0f9-416e-80b2-e19f4042abd9","name":"OpenAI"},{"parameters":{"jsCode":"// Normaliza o código e agrupa por código\nconst data = items.map(item => item.json)\n\nfunction normalizeCode(code) {\n  if (!code) return '';\n  code = code.toString().toUpperCase();\n  if (code.includes(\"/\")) code = code.split(\"/\").pop();\n  const match = code.match(/\\d{4,8}/);\n  return match ? match[0] : code.trim();\n}\n\n// Agrupa por código normalizado\nconst grouped = {};\nfor (const row of data) {\n  const codigoNorm = normalizeCode(row.Código);\n  if (!grouped[codigoNorm]) grouped[codigoNorm] = [];\n  grouped[codigoNorm].push(row);\n}\n\n// Gera markdown\nlet markdown = '';\nfor (const codigo in grouped) {\n  markdown += `### Código: ${codigo}\\n\\n`;\n  markdown += `| Fornecedor | Código Original | Descrição | Valor |\\n`;\n  markdown += `|------------|------------------|-----------|--------|\\n`;\n  for (const row of grouped[codigo]) {\n    markdown += `| ${row.Fornecedor} | ${row.Código} | ${row.Descrição} | R$ ${parseFloat(row.Valor).toFixed(2)} |\\n`;\n  }\n  markdown += '\\n';\n}\n\nreturn [{\n  json: {\n    markdown\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[100,220],"id":"222bd064-415b-4c9d-93f9-1dd0734fa698","name":"Code"},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"REFERÊNCIA","field2":"codigo_normalizado"}]},"options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[380,480],"id":"0ab02f19-cc06-48d0-a442-40648838ee48","name":"Merge"},{"parameters":{"operation":"download","fileId":{"__rl":true,"value":"[REDACTED]","mode":"list","cachedResultName":"geral_formatado.xlsx","cachedResultUrl":"[REDACTED]"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-400,460],"id":"79a91d79-3250-42c5-8d78-0d399fa8052c","name":"Google Drive"},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"46095ad2-e1da-4aff-a3d3-6c2c8cee6f3a","leftValue":"={{ $json['REFERÊNCIA'] }}","rightValue":"={{ $json['Código'] }}","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"looseTypeValidation":true,"options":{"ignoreCase":true}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1100,500],"id":"0edaec3a-849d-4fda-869f-147deb2c9574","name":"If"},{"parameters":{"assignments":{"assignments":[{"id":"ece783e5-10a1-4ec5-ae8d-bf56a69dc7f9","name":"Codigos","value":"={{ $json[\"Código\"].toString().includes($json[\"REFERÊNCIA\"].toString()) || $json[\"Código\"].toString().includes($json[\"REFERÊNCIA 2\"].toString()) ? \"match\" : \"no-match\" }}\n","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[600,480],"id":"fdfc2088-a668-4b94-8e2d-0cb452fb5ac6","name":"Edit Fields"},{"parameters":{"operation":"xlsx","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-160,460],"id":"c468b23c-dac6-4705-a7bc-d6f02d7c116e","name":"original"},{"parameters":{"operation":"xlsx","binaryPropertyName":"file","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-400,220],"id":"5610ed03-49ec-4404-be99-3a39630be906","name":"fornecedor"}],"connections":{"Webhook":{"main":[[{"node":"fornecedor","type":"main","index":0},{"node":"Google Drive","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0},{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"AI Agent","type":"ai_outputParser","index":0},{"node":"Basic LLM Chain","type":"ai_outputParser","index":0}]]},"Respond to Webhook":{"main":[[]]},"Basic LLM Chain":{"main":[[]]},"OpenAI":{"main":[[]]},"Code":{"main":[[{"node":"OpenAI","type":"main","index":0}]]},"Google Drive":{"main":[[{"node":"original","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"If":{"main":[[]]},"original":{"main":[[{"node":"Merge","type":"main","index":0}]]},"fornecedor":{"main":[[{"node":"Code","type":"main","index":0},{"node":"Merge","type":"main","index":1}]]}}}